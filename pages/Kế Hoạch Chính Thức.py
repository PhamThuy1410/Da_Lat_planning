import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials

# K·∫øt n·ªëi v·ªõi Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(st.secrets["gcp_service_account"], scopes=SCOPES)
gc = gspread.authorize(credentials)
SPREADSHEET_ID = "1pWDgcnuznQDXz-bOw1fttpZZP1-HWnW9nnznUsFHc7A"

def load_data(sheet_name):
    try:
        sh = gc.open_by_key(SPREADSHEET_ID)
        worksheet = sh.worksheet(sheet_name)
        data = worksheet.get_all_records()
        return pd.DataFrame(data)
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

def save_data(sheet_name, df):
    try:
        sh = gc.open_by_key(SPREADSHEET_ID)
        worksheet = sh.worksheet(sheet_name)

        # Ki·ªÉm tra v√† √©p ki·ªÉu d·ªØ li·ªáu
        for col in df.columns:
            if "VND" in col:  # N·∫øu c·ªôt ch·ª©a ti·ªÅn, ƒë·∫£m b·∫£o l√† s·ªë
                df[col] = pd.to_numeric(df[col], errors="coerce").fillna(0).astype(int)

        worksheet.clear()
        worksheet.update([df.columns.values.tolist()] + df.values.tolist())
        st.success("ƒê√£ l∆∞u th√†nh c√¥ng!")
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu: {e}")

def main():
    st.title("PROJECT: ƒê√Ä L·∫†T PLANNING")

    # Load danh s√°ch ng∆∞·ªùi tham gia
    st.header("DANH S√ÅCH THAM GIA")
    people_df = load_data("NguoiThamGia")

    if people_df.empty:
        people_df = pd.DataFrame({"STT": [], "H·ªç v√† T√™n": [], "Chi Ph√≠ (VNƒê)": []})

    # X·ª≠ l√Ω d·ªØ li·ªáu: ƒë·∫£m b·∫£o "Chi Ph√≠ (VNƒê)" kh√¥ng c√≥ NaN v√† l√† s·ªë nguy√™n
    people_df["STT"] = range(1, len(people_df) + 1)
    people_df["H·ªç v√† T√™n"] = people_df["H·ªç v√† T√™n"].astype(str)  # √âp ki·ªÉu v·ªÅ chu·ªói

    # X·ª≠ l√Ω c·ªôt "Chi Ph√≠ (VNƒê)"
    people_df["Chi Ph√≠ (VNƒê)"] = (
        pd.to_numeric(people_df["Chi Ph√≠ (VNƒê)"].astype(str).str.replace(",", ""), errors="coerce")
        .fillna(0)
        .astype(int)
    )

    # Hi·ªÉn th·ªã b·∫£ng ch·ªânh s·ª≠a d·ªØ li·ªáu
    people_df = st.data_editor(people_df, num_rows="dynamic", key="people")

    # T·ªïng s·ªë ng∆∞·ªùi & chi ph√≠
    total_people = people_df["H·ªç v√† T√™n"].nunique()
    total_cost_people = people_df["Chi Ph√≠ (VNƒê)"].sum()

    # L∆∞u d·ªØ li·ªáu khi nh·∫•n n√∫t
    if st.button("L∆∞u", key="save_people"):
        save_data("NguoiThamGia", people_df)

    col1, col2 = st.columns(2)

    # CSS ƒë·ªÉ ƒë·ªïi m√†u xanh
    st.markdown(
        """
        <style>
            .metric-container {
                color: #00FF00 !important; /* M√†u xanh */
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    #Card KPI
    with col1:
        st.metric(label="üë• T·ªîNG S·ªê NG∆Ø·ªúI THAM GIA", value=total_people)
        st.markdown('<p class="metric-container">üë• T·ªîNG S·ªê NG∆Ø·ªúI THAM GIA</p>', unsafe_allow_html=True)
    
    with col2:
        st.metric(label="üí∞ T·ªîNG CHI PH√ç", value=f"{int(total_cost_people):,} VND")
        st.markdown('<p class="metric-container">üí∞ T·ªîNG CHI PH√ç</p>', unsafe_allow_html=True)



    # B·∫£ng chi ph√≠
    st.header("CHI PH√ç C·ªê ƒê·ªäNH")
    chi_phi_df = load_data("ChiPhi_LichTrinh")

    if chi_phi_df.empty:
        chi_phi_df = pd.DataFrame({
            "Kho·∫£n Chi": ["Ti·ªÅn xe kh√°ch", "Ti·ªÅn xƒÉng", "Ti·ªÅn thu√™ xe m√°y", "Ti·ªÅn kh√°ch s·∫°n", "Chi ph√≠ kh√°c"],
            "S·ªë Ti·ªÅn (VND)": [0, 0, 0, 0, 0]
        })

    # Chuy·ªÉn c·ªôt "S·ªë Ti·ªÅn (VND)" th√†nh s·ªë, x·ª≠ l√Ω d·∫•u ph·∫©y n·∫øu c√≥
    chi_phi_df["S·ªë ti·ªÅn (VND)"] = (
        pd.to_numeric(chi_phi_df["S·ªë ti·ªÅn (VND)"].astype(str).str.replace(",", ""), errors="coerce")
        .fillna(0)
        .astype(int)
    )

    chi_phi_df = st.data_editor(chi_phi_df, num_rows="dynamic", key="chi_phi")

    total_cost_trip = chi_phi_df["S·ªë ti·ªÅn (VND)"].sum()
    st.write(f"### T·ªîNG CHI PH√ç: {total_cost_trip:,} VND")

    if st.button("L∆∞u", key="save_cost"):
        save_data("ChiPhi_LichTrinh", chi_phi_df)


    # B·∫£ng k·∫ø ho·∫°ch l·ªãch tr√¨nh
    st.header("L·ªäCH TR√åNH V√Ä CHI PH√ç")
    plan_df = load_data("LichTrinh")

    if plan_df.empty:
        plan_df = pd.DataFrame({
            "Ng√†y": [""],
            "Th·ªùi Gian": [""],
            "ƒê·ªãa ƒëi·ªÉm": [""],
            "Link tham kh·∫£o": [""],
            "∆Ø·ªõc t√≠nh chi ph√≠ (VND)": [0]
        })

    # X·ª≠ l√Ω d·ªØ li·ªáu: chuy·ªÉn c·ªôt "∆Ø·ªõc T√≠nh Chi Ph√≠ (VND)" th√†nh s·ªë nguy√™n
    plan_df["∆Ø·ªõc t√≠nh chi ph√≠ (VND)"] = (
        pd.to_numeric(plan_df["∆Ø·ªõc t√≠nh chi ph√≠ (VND)"].astype(str).str.replace(",", ""), errors="coerce")
        .fillna(0)
        .astype(int)
    )

    plan_df = st.data_editor(
    plan_df,
    num_rows="dynamic",
    key="plan",
    use_container_width=True,
    column_config={
        "Ph√¢n lo·∫°i": st.column_config.SelectboxColumn(
            "Ph√¢n lo·∫°i", options=["Checking", "ƒÇn u·ªëng"], required=True)
        }
    )

    total_plan_cost = plan_df["∆Ø·ªõc t√≠nh chi ph√≠ (VND)"].sum()
    st.write(f"### T·ªîNG CHI PH√ç: {total_plan_cost:,} VND")

    if st.button("L∆∞u", key="save_plan"):
        save_data("LichTrinh", plan_df)

    # Hi·ªÉn th·ªã KPI Budget c√≤n l·∫°i
    # T√≠nh to√°n Budget c√≤n l·∫°i
    budget_remaining = int(total_cost_people - (total_cost_trip + total_plan_cost))  # ƒê·∫£m b·∫£o ki·ªÉu int

    # Hi·ªÉn th·ªã KPI Budget c√≤n l·∫°i
    st.header("üí∞ S·ªê TI·ªÄN C√íN L·∫†I")
    st.metric(label=" ", value=f"{budget_remaining:,} VND")

if __name__ == "__main__":
    main()
