import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.schema import SystemMessage, HumanMessage
from langchain.memory import ConversationBufferMemory

# C·∫•u h√¨nh API Gemini
GEMINI_API_KEY = st.secrets["gemini"]["google_api_key"]
chat_model = ChatGoogleGenerativeAI(model="gemini-2.0-pro-exp", google_api_key=GEMINI_API_KEY)

# C·∫•u h√¨nh b·ªô nh·ªõ chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# K·∫øt n·ªëi v·ªõi Google Sheets
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
credentials = Credentials.from_service_account_info(st.secrets["gcp_service_account"], scopes=SCOPES)
gc = gspread.authorize(credentials)
SPREADSHEET_ID = "1pWDgcnuznQDXz-bOw1fttpZZP1-HWnW9nnznUsFHc7A"

def load_data(sheet_name):
    try:
        worksheet = gc.open_by_key(SPREADSHEET_ID).worksheet(sheet_name)
        return pd.DataFrame(worksheet.get_all_records())
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return pd.DataFrame()

people_df = load_data("NguoiThamGia")
chi_phi_df = load_data("ChiPhi_LichTrinh")
lich_trinh_df = load_data("LichTrinh")

people_list = ", ".join(people_df["H·ªç v√† T√™n"].tolist())
total_budget = people_df["Budget"].sum()
total_fixed_cost = chi_phi_df["Chi ph√≠"].sum()
total_plan_cost = lich_trinh_df["Chi ph√≠"].sum()
remaining_budget = total_budget - (total_fixed_cost + total_plan_cost)

import pandas as pd

def ask_ai(question):
    # T√¨m ng√†y c·ª• th·ªÉ n·∫øu c√≥ trong c√¢u h·ªèi
    detected_date = None
    for date in sorted(lich_trinh_df["Ng√†y"].unique()):
        if date in question:
            detected_date = date
            break

    # T·∫°o danh s√°ch l·ªãch tr√¨nh
    schedule_summary = {}
    for date in sorted(lich_trinh_df["Ng√†y"].unique()):
        activities = lich_trinh_df[lich_trinh_df["Ng√†y"] == date]
        activity_list = "\n".join(
            f"- {row['Th·ªùi gian']}: {row['ƒê·ªãa ƒëi·ªÉm']} ({row['ƒê·ªãa ch·ªâ']})"
            + (f" üîó [{row['Link tham kh·∫£o']}]({row['Link tham kh·∫£o']})" if row['Link tham kh·∫£o'] else "")
            + f" üí∞ {row['Chi ph√≠']:,} VND"
            for _, row in activities.iterrows()
        )
        schedule_summary[date] = activity_list

    # Ch·ªâ hi·ªÉn th·ªã l·ªãch tr√¨nh c·ªßa ng√†y ƒë∆∞·ª£c h·ªèi (n·∫øu c√≥)
    if detected_date:
        schedule_info = f"üìÖ Ng√†y {detected_date}:\n{schedule_summary[detected_date]}"
    else:
        schedule_info = "\n\n".join(f"üìÖ Ng√†y {date}:\n{activities}" for date, activities in schedule_summary.items())

    # Prompt linh ho·∫°t h·ªó tr·ª£ c·∫£ t√†i ch√≠nh & l·ªãch tr√¨nh
    prompt = f"""
    B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh h·ªó tr·ª£ l·∫≠p k·∫ø ho·∫°ch chuy·∫øn ƒëi ƒê√† L·∫°t. D·ªØ li·ªáu c·ªßa b·∫°n g·ªìm:
    
    üßë‚Äçü§ù‚Äçüßë **Danh s√°ch ng∆∞·ªùi tham gia**: {people_list}
    üí∞ **T√†i ch√≠nh**:
      - T·ªïng ng√¢n s√°ch: {total_budget:,} VND
      - T·ªïng chi ph√≠ c·ªë ƒë·ªãnh: {total_fixed_cost:,} VND
      - S·ªë d∆∞ c√≤n l·∫°i: {remaining_budget:,} VND

    üìÜ **L·ªãch tr√¨nh chuy·∫øn ƒëi**:
    {schedule_info}

    Ng∆∞·ªùi d√πng c√≥ th·ªÉ h·ªèi v·ªÅ **t√†i ch√≠nh** ho·∫∑c **l·ªãch tr√¨nh**. Tr·∫£ l·ªùi r√µ r√†ng, d·ªÖ hi·ªÉu.
    Ng∆∞·ªùi d√πng h·ªèi: {question}
    """

    # G·ª≠i c√¢u h·ªèi v√†o m√¥ h√¨nh AI
    response = chat_model.invoke([SystemMessage(content=prompt), HumanMessage(content=question)])
    return response.content

st.title("üí¨ Tr·ª£ l√Ω AI - ƒê√† L·∫°t Planning")

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# √î nh·∫≠p tin nh·∫Øn
user_input = st.chat_input("H√£y ƒë·∫∑t c√¢u h·ªèi v·ªÅ ng√¢n s√°ch & l·ªãch tr√¨nh c·ªßa b·∫°n:")
if user_input:
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)
    
    response = ask_ai(user_input)
    st.session_state.messages.append({"role": "assistant", "content": response})
    with st.chat_message("assistant"):
        st.markdown(response)
